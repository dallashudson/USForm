{"version":3,"sources":["FolderSelect.tsx","ErrorList.tsx","MyFormSelect.tsx","testers.ts","Sign.tsx","Lexia.ts","App.tsx","index.tsx"],"names":["ImportForm","props","folderInput","React","className","type","directory","webkitdirectory","ref","ErrorList","errors","map","error","index","msg","MyFormSelect","children","onBlur","onFocus","useState","errorList","setErrorList","validation","useFormValidation","e","identity","result","length","name","code","Sign","lexia","tester","setTester","setStation","setTestDate","setReports","setSaveLocation","Date","value","onChange","testerList","useMemo","testers","heading","onSubmit","preventDefault","isValid","alert","autoComplete","id","target","required","placeholders","btn","validationMessages","en","isEmail","tr","isName","isAlphaNumeric","email","dallas","lastName","password","passwordRepeat","alertMsg","fistName","country","App","lan","config","customMessages","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.cde17a13.chunk.js","sourcesContent":["import * as React from \"react\";\nimport { FormProps } from \"reactjs-forms/types\";\n\nexport const ImportForm: React.FunctionComponent<FormProps> = (props) => {\nconst folderInput= React.useRef(null);\n\nreturn (\n<>\n           <div className=\"form-group row\">\n              <div className=\"col-lg-6\">\n              </div>\n              <div className=\"col-lg-6\">\n                <input\n                  type=\"file\"  \n                  directory=\"\"\n                  webkitdirectory=\"\"                \n                  className=\"form-control\"\n                  ref={folderInput}\n                />\n              </div>\n            </div>\n</>)\n};\n\ndeclare module 'react' {\n  interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n    // extends React's HTMLAttributes\n    directory?: string;        // remember to make these attributes optional....\n    webkitdirectory?: string;\n  }\n}\nexport default ImportForm;","import { FC } from \"react\";\nimport { ValidationResult } from \"reactjs-forms/types\";\n\ntype ErrorListProps = {\n  errors?: ValidationResult;\n};\n\nconst ErrorList: FC<ErrorListProps> = ({ errors = [] }) => {\n  return (\n    <div className=\"error\">\n      <ul>\n        {errors.map((error, index) => (\n          <li key={index}>{error.msg}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default ErrorList;\n","import { FC, useState, FocusEventHandler } from \"react\";\nimport { Select, useFormValidation } from \"reactjs-forms\";\nimport ErrorList from \"./ErrorList\";\nimport {\n  ExtendedHTMLSelectElement,\n  SelectProps,\n  ValidationResult\n} from \"reactjs-forms/types\";\n\ninterface MyFormSelectProps extends SelectProps {}\nconst MyFormSelect: FC<MyFormSelectProps> = ({\n  children,\n  onBlur,\n  onFocus,\n  className,\n  ...props\n}) => {\n  const [errorList, setErrorList] = useState<ValidationResult>([]);\n  const validation = useFormValidation();\n\n  const blurHandler: FocusEventHandler<ExtendedHTMLSelectElement> = (e) => {\n    setErrorList(validation(props.identity!).result[props.identity!]);\n    if (onBlur) onBlur(e);\n  };\n\n  const focusHandler: FocusEventHandler<ExtendedHTMLSelectElement> = (e) => {\n    setErrorList([]);\n    if (onFocus) onFocus(e);\n  };\n\n  return (\n    <div className=\"control-wrapper\">\n      <Select\n        {...props}\n        onBlur={blurHandler}\n        onFocus={focusHandler}\n        className={className + (errorList.length > 0 ? ` error-element` : ``)}\n      >\n        {children}\n      </Select>\n      <ErrorList errors={errorList} />\n    </div>\n  );\n};\n\nexport default MyFormSelect;\n","export default [\n  { name: \"Kirk Norman\", code: \"KN\" },\n  { name: \"John Meyers\", code: \"JM\" },\n  { name: \"Frank Muniz\", code: \"FM\" },\n  { name: \"Dallas Hudson\", code: \"DH\" },\n  { name: \"Daniel Townsend\", code: \"DT\" },\n  { name: \"Holt Holcomb\", code: \"HH\" }\n];\n","import {\n  ChangeEventHandler,\n  FC,\n  FormEventHandler,\n  useMemo,\n  useState,\n} from \"react\";\n\nimport InputForm from \"./FolderSelect\";\n\nimport { Form, useFormValidation } from \"reactjs-forms\";\nimport MyFormControl from \"./MyFormControl\";\nimport MyFormSelect from \"./MyFormSelect\";\nimport {\n  CustomValidator,\n  ExtendedHTMLFormElement,\n  ExtendedHTMLSelectElement\n} from \"reactjs-forms/types\";\nimport testers from \"./testers\";\nimport \"./styles.css\";\nimport { LexiaProps } from \"./Lexia\";\nimport DatePicker from 'react-date-picker';\n\ntype SignProps = {\n  lexia: LexiaProps;\n};\nconst Sign: FC<SignProps> = ({ lexia }) => {\n  const [tester, setTester] = useState(\"\");\n  const [Station, setStation] = useState(\"\");\n  const [dateTested, setTestDate] = useState(\"\");\n  const [reportsNeeded, setReports] = useState(\"\");\n  const [saveLocation, setSaveLocation] = useState(\"\");\n\n  \n  const [value, onChange] = useState(new Date());\n\n\n  const validation = useFormValidation();\n\n  const testerList = useMemo(\n    () =>\n      testers.map((tester) => (\n        <option key={tester.code} value={tester.code}>\n          {tester.name}\n        </option>\n      )),\n    []\n  );\n\n  const changeHandler: ChangeEventHandler<\n    HTMLInputElement | ExtendedHTMLSelectElement\n  > = (e) => {\n    const { id, value } = e.target;\n    switch (id) {\n      case \"tester\":\n        setTester(value);\n        break;\n      case \"station\":\n        setStation(value);\n        break;\n      case \"date\":\n        setTestDate(value);\n        break;\n      case \"report\":\n        setReports(value);\n        break;\n      case \"location\":\n        setSaveLocation(value);\n        break;\n    }\n  };\n\n  const submitHandler: FormEventHandler<ExtendedHTMLFormElement> = (e) => {\n    e.preventDefault();\n    const { isValid } = validation();\n\n    if (isValid) alert(\"Registration was succeeded!\");\n  };\n\n  type TypeIsEqulPasswords = (password: string) => CustomValidator;\n\n  const isEqulPasswords: TypeIsEqulPasswords = (password) => {\n    return function (value, identity) {\n      return {\n        msg: \"passwords didn't match\",\n        result: password === value\n      };\n    };\n  };\n\n  return (\n    <div className=\"box\">\n      <h2 className=\"heading\">{lexia.heading}</h2>\n      <Form onSubmit={submitHandler} autoComplete=\"off\">\n        <div className=\"control-wrapper\">\n          Tester Name\n          <MyFormSelect\n            className=\"control\"\n            identity=\"tester\"\n            id=\"tester\"\n            onChange={changeHandler}\n            value={tester}\n            validation={{\n              required: true\n            }}\n            >\n            <option value=\"\">{lexia.placeholders[\"tester\"]}</option>\n            {testerList}\n          </MyFormSelect>\n        </div>\n\n\n        <div className=\"control-wrapper half\">\n          Date Tested\n\n          <div>\n            <DatePicker onChange={onChange} value={value} />\n          </div>\n\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Petro Tite Line Report\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />ELLD/MLLD\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Annual Dispensers\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Annual STP\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />PV Valve\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />ATGProbe Annual Comp.\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />STP Sump Testing\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Spill Bucket Testing\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />30 Day Spill Bucket\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Monthly Inspection\n          </div>\n\n          <div>\n            Select Destination:\n          </div>\n          <InputForm></InputForm>\n          <div></div>\n          \n        </div>\n        \n        <div className=\"control-wrapper\">\n          <button className=\"btn btn-blue\">{lexia.btn}</button>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default Sign;","import { PrimaryCustomMessages } from \"reactjs-forms/types\";\n\ntype TypeCustomMessage = {\n  [ln: string]: PrimaryCustomMessages;\n};\n\nconst validationMessages: TypeCustomMessage = {\n  en: {\n    isEmail: \"upss! email address is invalid\"\n  }, //there are already default messages for en\n  tr: {\n    required: \"{{identity}} zorunlu alandır\",\n    isName: \"geçersiz ad girdiniz\",\n    isAlphaNumeric: \"{{identity}} sadece rakam ve harflerden oluşmalıdır\",\n    isEmail: \"geçersiz email adresi\"\n  }\n};\n\nexport type LexiaProps = {\n  heading: string;\n  btn: string;\n  placeholders: {\n    [p: string]: string;\n  };\n  alertMsg: string;\n  validation: PrimaryCustomMessages;\n};\n\nexport type Laxia = {\n  [ln: string]: LexiaProps;\n};\n\nconst lexia: Laxia = {\n  en: {\n    heading: \"Form Generator\",\n    btn: \"Generate Form\",\n    placeholders: {\n      email: \"Email Adress\",\n      dallas: \"dallas\",\n      lastName: \"Last Name\",\n      password: \"Password\",\n      passwordRepeat: \"Password-Repeat\",\n      tester: \"Select\"\n    },\n    alertMsg: \"Registration was succeeded!\",\n    validation: validationMessages[\"en\"]\n  },\n  tr: {\n    heading: \"Kaydol\",\n    btn: \"Şimdi Kaydol\",\n    placeholders: {\n      email: \"Email Adresi\",\n      fistName: \"Ad\",\n      lastName: \"Soyad\",\n      password: \"Şifre\",\n      passwordRepeat: \"Şifre Tekrar\",\n      country: \"Ülke\"\n    },\n    alertMsg: \"Kayıt başarı ile gerçekleşti!\",\n    validation: validationMessages[\"tr\"]\n  }\n};\n\nexport default lexia;\n","import { FC, MouseEventHandler, useState } from \"react\";\nimport Sign from \"./Sign\";\nimport Header from \"./Header\";\nimport FormValidation from \"reactjs-forms\";\nimport lexia from \"./Lexia\";\n\ntype Language = \"en\" | \"tr\";\n\nconst App: FC = () => {\n  const [lan, setLan] = useState<Language>(\"en\");\n\n  const setLanguage: MouseEventHandler<HTMLButtonElement> = (e) => {\n    const { language } = e.currentTarget.dataset;\n    if (language && language !== lan) setLan(language as Language);\n  };\n\n  return (\n    <FormValidation\n      config={{\n        customMessages: lexia[lan].validation\n      }}\n    >\n      <Sign lexia={lexia[lan]} />\n    </FormValidation>\n  );\n};\n\nexport default App;\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nrender(<App />, rootElement);\n"],"sourceRoot":""}