{"version":3,"sources":["FolderSelect.tsx","ErrorList.tsx","MyFormControl.tsx","MyFormSelect.tsx","testers.ts","Sign.tsx","Lexia.ts","App.tsx","index.tsx"],"names":["ImportForm","props","folderInput","React","className","type","directory","webkitdirectory","ref","ErrorList","errors","map","error","index","msg","MyFormControl","onBlur","onFocus","useState","errorList","setErrorList","validation","useFormValidation","e","identity","result","length","MyFormSelect","children","name","code","Sign","password","lexia","tester","setTester","setStation","setTestDate","setReports","setSaveLocation","Date","value","onChange","testerList","useMemo","testers","changeHandler","target","id","heading","onSubmit","preventDefault","isValid","alert","autoComplete","required","placeholders","placeholder","isName","isAlphaNumeric","minLen","customValidation","isEqulPasswords","btn","validationMessages","en","isEmail","tr","email","dallas","lastName","passwordRepeat","alertMsg","fistName","country","App","lan","config","customMessages","rootElement","document","getElementById","render"],"mappings":"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","file":"static/js/main.43169c17.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport { FormProps } from \"reactjs-forms/types\";\r\n\r\nexport const ImportForm: React.FunctionComponent<FormProps> = (props) => {\r\nconst folderInput= React.useRef(null);\r\n\r\nreturn (\r\n<>\r\n           <div className=\"form-group row\">\r\n              <div className=\"col-lg-6\">\r\n                <label>Select Folder</label>\r\n              </div>\r\n              <div className=\"col-lg-6\">\r\n                <input\r\n                  type=\"file\"  \r\n                  directory=\"\"\r\n                  webkitdirectory=\"\"                \r\n                  className=\"form-control\"\r\n                  ref={folderInput}\r\n                />\r\n              </div>\r\n            </div>\r\n</>)\r\n};\r\n\r\ndeclare module 'react' {\r\n  interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\r\n    // extends React's HTMLAttributes\r\n    directory?: string;        // remember to make these attributes optional....\r\n    webkitdirectory?: string;\r\n  }\r\n}\r\nexport default ImportForm;","import { FC } from \"react\";\r\nimport { ValidationResult } from \"reactjs-forms/types\";\r\n\r\ntype ErrorListProps = {\r\n  errors?: ValidationResult;\r\n};\r\n\r\nconst ErrorList: FC<ErrorListProps> = ({ errors = [] }) => {\r\n  return (\r\n    <div className=\"error\">\r\n      <ul>\r\n        {errors.map((error, index) => (\r\n          <li key={index}>{error.msg}</li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ErrorList;\r\n","import { FC, useState, FocusEventHandler } from \"react\";\r\nimport { Input, useFormValidation } from \"reactjs-forms\";\r\nimport ErrorList from \"./ErrorList\";\r\nimport { InputProps, ValidationResult } from \"reactjs-forms/types\";\r\n\r\ninterface MyFormControlProps extends InputProps {}\r\nconst MyFormControl: FC<MyFormControlProps> = ({\r\n  onBlur,\r\n  onFocus,\r\n  className,\r\n  ...props\r\n}) => {\r\n  const [errorList, setErrorList] = useState<ValidationResult>([]);\r\n  const validation = useFormValidation();\r\n\r\n  const blurHandler: FocusEventHandler<HTMLInputElement> = (e) => {\r\n    setErrorList(validation(props.identity!).result[props.identity!]);\r\n    if (onBlur) onBlur(e);\r\n  };\r\n\r\n  const focusHandler: FocusEventHandler<HTMLInputElement> = (e) => {\r\n    setErrorList([]);\r\n    if (onFocus) onFocus(e);\r\n  };\r\n\r\n  return (\r\n    <div className=\"control-wrapper\">\r\n      <Input\r\n        {...props}\r\n        onBlur={blurHandler}\r\n        onFocus={focusHandler}\r\n        className={className + (errorList.length > 0 ? ` error-element` : ``)}\r\n      />\r\n      <ErrorList errors={errorList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyFormControl;\r\n","import { FC, useState, FocusEventHandler } from \"react\";\r\nimport { Select, useFormValidation } from \"reactjs-forms\";\r\nimport ErrorList from \"./ErrorList\";\r\nimport {\r\n  ExtendedHTMLSelectElement,\r\n  SelectProps,\r\n  ValidationResult\r\n} from \"reactjs-forms/types\";\r\n\r\ninterface MyFormSelectProps extends SelectProps {}\r\nconst MyFormSelect: FC<MyFormSelectProps> = ({\r\n  children,\r\n  onBlur,\r\n  onFocus,\r\n  className,\r\n  ...props\r\n}) => {\r\n  const [errorList, setErrorList] = useState<ValidationResult>([]);\r\n  const validation = useFormValidation();\r\n\r\n  const blurHandler: FocusEventHandler<ExtendedHTMLSelectElement> = (e) => {\r\n    setErrorList(validation(props.identity!).result[props.identity!]);\r\n    if (onBlur) onBlur(e);\r\n  };\r\n\r\n  const focusHandler: FocusEventHandler<ExtendedHTMLSelectElement> = (e) => {\r\n    setErrorList([]);\r\n    if (onFocus) onFocus(e);\r\n  };\r\n\r\n  return (\r\n    <div className=\"control-wrapper\">\r\n      <Select\r\n        {...props}\r\n        onBlur={blurHandler}\r\n        onFocus={focusHandler}\r\n        className={className + (errorList.length > 0 ? ` error-element` : ``)}\r\n      >\r\n        {children}\r\n      </Select>\r\n      <ErrorList errors={errorList} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyFormSelect;\r\n","export default [\r\n  { name: \"Kirk Norman\", code: \"KN\" },\r\n  { name: \"John Meyers\", code: \"JM\" },\r\n  { name: \"Frank Muniz\", code: \"FM\" },\r\n  { name: \"Dallas Hudson\", code: \"DH\" },\r\n  { name: \"Daniel Townsend\", code: \"DT\" },\r\n  { name: \"Holt Holcomb\", code: \"HH\" }\r\n];\r\n","import {\n  ChangeEventHandler,\n  FC,\n  FormEventHandler,\n  useMemo,\n  useState,\n} from \"react\";\n\nimport InputForm from \"./FolderSelect\";\n\nimport { Form, useFormValidation } from \"reactjs-forms\";\nimport MyFormControl from \"./MyFormControl\";\nimport MyFormSelect from \"./MyFormSelect\";\nimport {\n  CustomValidator,\n  ExtendedHTMLFormElement,\n  ExtendedHTMLSelectElement\n} from \"reactjs-forms/types\";\nimport testers from \"./testers\";\nimport \"./styles.css\";\nimport { LexiaProps } from \"./Lexia\";\nimport DatePicker from 'react-date-picker';\n\ntype SignProps = {\n  lexia: LexiaProps;\n};\nconst Sign: FC<SignProps> = ({ lexia }) => {\n  const [tester, setTester] = useState(\"\");\n  const [Station, setStation] = useState(\"\");\n  const [dateTested, setTestDate] = useState(\"\");\n  const [reportsNeeded, setReports] = useState(\"\");\n  const [saveLocation, setSaveLocation] = useState(\"\");\n\n  \n  const [value, onChange] = useState(new Date());\n\n\n  const validation = useFormValidation();\n\n  const testerList = useMemo(\n    () =>\n      testers.map((tester) => (\n        <option key={tester.code} value={tester.code}>\n          {tester.name}\n        </option>\n      )),\n    []\n  );\n\n  const changeHandler: ChangeEventHandler<\n    HTMLInputElement | ExtendedHTMLSelectElement\n  > = (e) => {\n    const { id, value } = e.target;\n    switch (id) {\n      case \"tester\":\n        setTester(value);\n        break;\n      case \"station\":\n        setStation(value);\n        break;\n      case \"date\":\n        setTestDate(value);\n        break;\n      case \"report\":\n        setReports(value);\n        break;\n      case \"location\":\n        setSaveLocation(value);\n        break;\n    }\n  };\n\n  const submitHandler: FormEventHandler<ExtendedHTMLFormElement> = (e) => {\n    e.preventDefault();\n    const { isValid } = validation();\n\n    if (isValid) alert(\"Registration was succeeded!\");\n  };\n\n  type TypeIsEqulPasswords = (password: string) => CustomValidator;\n\n  const isEqulPasswords: TypeIsEqulPasswords = (password) => {\n    return function (value, identity) {\n      return {\n        msg: \"passwords didn't match\",\n        result: password === value\n      };\n    };\n  };\n\n  return (\n    <div className=\"box\">\n      <h2 className=\"heading\">{lexia.heading}</h2>\n      <Form onSubmit={submitHandler} autoComplete=\"off\">\n        <div className=\"control-wrapper\">\n          Tester Name\n          <MyFormSelect\n            className=\"control\"\n            identity=\"tester\"\n            id=\"tester\"\n            onChange={changeHandler}\n            value={tester}\n            validation={{\n              required: true\n            }}\n            >\n            <option value=\"\">{lexia.placeholders[\"tester\"]}</option>\n            {testerList}\n          </MyFormSelect>\n        </div>\n\n\n        <div className=\"control-wrapper half\">\n          Date Tested\n\n          <div>\n            <DatePicker onChange={onChange} value={value} />\n          </div>\n\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Petro Tite Line Report\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />ELLD/MLLD\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Annual Dispensers\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Annual STP\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />PV Valve\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />ATGProbe Annual Comp.\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />STP Sump Testing\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Spill Bucket Testing\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />30 Day Spill Bucket\n          </div>\n          <div className=\"topping\">\n            <input type=\"checkbox\" id=\"line_report\" name=\"line_report\" value=\"Petro Tite Line Report\" />Monthly Inspection\n          </div>\n\n          <div>\n            Select Destination:\n          </div>\n          <InputForm></InputForm>\n          <div></div>\n          \n          <MyFormControl\n            type=\"text\"\n            className=\"control\"\n            placeholder={lexia.placeholders[\"fistName\"]}\n            identity=\"firstname\"\n            id=\"firstname\"\n            onChange={changeHandler}\n            value={\"bruh\"}\n            validation={{\n              required: true,\n              isName: true\n            }}\n          />\n          <MyFormControl\n            type=\"text\"\n            className=\"control\"\n            placeholder={lexia.placeholders[\"lastName\"]}\n            identity=\"lastname\"\n            id=\"lastname\"\n            onChange={changeHandler}\n            value={\"bruh\"}\n            validation={{\n              required: true,\n              isName: true\n            }}\n          />\n        </div>\n        <div className=\"control-wrapper half\">\n          <MyFormControl\n            type=\"password\"\n            id=\"password\"\n            className=\"control\"\n            placeholder={lexia.placeholders[\"password\"]}\n            identity=\"password\"\n            onChange={changeHandler}\n            value={\"bruh\"}\n            validation={{\n              required: true,\n              isAlphaNumeric: true,\n              minLen: 8\n            }}\n          />\n          <MyFormControl\n            type=\"password\"\n            className=\"control\"\n            placeholder={lexia.placeholders[\"passwordRepeat\"]}\n            identity=\"passwordRepeat\"\n            id=\"passwordRepeat\"\n            onChange={changeHandler}\n            value={\"bruh\"}\n            customValidation={{\n              isEqulPasswords: isEqulPasswords(\"bruh\")\n            }}\n          />\n        </div>\n        \n        <div className=\"control-wrapper\">\n          <button className=\"btn btn-blue\">{lexia.btn}</button>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default Sign;","import { PrimaryCustomMessages } from \"reactjs-forms/types\";\r\n\r\ntype TypeCustomMessage = {\r\n  [ln: string]: PrimaryCustomMessages;\r\n};\r\n\r\nconst validationMessages: TypeCustomMessage = {\r\n  en: {\r\n    isEmail: \"upss! email address is invalid\"\r\n  }, //there are already default messages for en\r\n  tr: {\r\n    required: \"{{identity}} zorunlu alandır\",\r\n    isName: \"geçersiz ad girdiniz\",\r\n    isAlphaNumeric: \"{{identity}} sadece rakam ve harflerden oluşmalıdır\",\r\n    isEmail: \"geçersiz email adresi\"\r\n  }\r\n};\r\n\r\nexport type LexiaProps = {\r\n  heading: string;\r\n  btn: string;\r\n  placeholders: {\r\n    [p: string]: string;\r\n  };\r\n  alertMsg: string;\r\n  validation: PrimaryCustomMessages;\r\n};\r\n\r\nexport type Laxia = {\r\n  [ln: string]: LexiaProps;\r\n};\r\n\r\nconst lexia: Laxia = {\r\n  en: {\r\n    heading: \"Form Generator\",\r\n    btn: \"Generate Form\",\r\n    placeholders: {\r\n      email: \"Email Adress\",\r\n      dallas: \"dallas\",\r\n      lastName: \"Last Name\",\r\n      password: \"Password\",\r\n      passwordRepeat: \"Password-Repeat\",\r\n      tester: \"Select\"\r\n    },\r\n    alertMsg: \"Registration was succeeded!\",\r\n    validation: validationMessages[\"en\"]\r\n  },\r\n  tr: {\r\n    heading: \"Kaydol\",\r\n    btn: \"Şimdi Kaydol\",\r\n    placeholders: {\r\n      email: \"Email Adresi\",\r\n      fistName: \"Ad\",\r\n      lastName: \"Soyad\",\r\n      password: \"Şifre\",\r\n      passwordRepeat: \"Şifre Tekrar\",\r\n      country: \"Ülke\"\r\n    },\r\n    alertMsg: \"Kayıt başarı ile gerçekleşti!\",\r\n    validation: validationMessages[\"tr\"]\r\n  }\r\n};\r\n\r\nexport default lexia;\r\n","import { FC, MouseEventHandler, useState } from \"react\";\r\nimport Sign from \"./Sign\";\r\nimport Header from \"./Header\";\r\nimport FormValidation from \"reactjs-forms\";\r\nimport lexia from \"./Lexia\";\r\n\r\ntype Language = \"en\" | \"tr\";\r\n\r\nconst App: FC = () => {\r\n  const [lan, setLan] = useState<Language>(\"en\");\r\n\r\n  const setLanguage: MouseEventHandler<HTMLButtonElement> = (e) => {\r\n    const { language } = e.currentTarget.dataset;\r\n    if (language && language !== lan) setLan(language as Language);\r\n  };\r\n\r\n  return (\r\n    <FormValidation\r\n      config={{\r\n        customMessages: lexia[lan].validation\r\n      }}\r\n    >\r\n      <Sign lexia={lexia[lan]} />\r\n    </FormValidation>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { render } from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nrender(<App />, rootElement);\n"],"sourceRoot":""}